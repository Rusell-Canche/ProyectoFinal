     1                                 %line 1+1 Proyecto.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 [section .data]
    10                                 
    11                                 LF equ 10
    12                                 NULL equ 0
    13                                 EXIT_SUCCESS equ 0
    14                                 STDIN equ 0
    15                                 STDOUT equ 1
    16                                 STDERR equ 2
    17                                 SYS_read equ 0
    18                                 SYS_write equ 1
    19                                 SYS_open equ 2
    20                                 SYS_close equ 3
    21                                 SYS_exit equ 60
    22                                 SYS_creat equ 85
    23                                 O_RDONLY equ 000000
    24                                 O_WRONLY equ 000001
    25                                 O_CREAT equ 0x40
    26                                 O_TRUNC equ 0x200
    27                                 O_APPEND equ 0x400
    28                                 S_IRUSR equ 00400
    29                                 S_IWUSR equ 00200
    30                                 BUFF_SIZE equ 65536
    31                                 MAX_ADN_SIZE equ 8000000
    32 00000000 3A2000                 separator db ": ", 0
    33 00000003 416E616C697A61646F-    header db "Analizador de palabras de ADN", LF, LF, NULL
    34 00000003 722064652070616C61-
    35 00000003 627261732064652041-
    36 00000003 444E0A0A00         
    37 00000023 5072756562612E7478-    fileName db "Prueba.txt", NULL
    38 00000023 7400               
    39 0000002E 70616C61627261732E-    outFileName db "palabras.txt", NULL
    40 0000002E 74787400           
    41 0000003B 496E6772657365206C-    promptK db "Ingrese longitud de palabra (4-10): ", NULL
    42 0000003B 6F6E67697475642064-
    43 0000003B 652070616C61627261-
    44 0000003B 2028342D3130293A20-
    45 0000003B 00                 
    46 00000060 2000                   espacio db " ", 0
    47 00000062 50616C616272617320-    ordenadoMsg db "Palabras Ordenadas con Repeticiones:", 13, 10, 0
    48 00000062 4F7264656E61646173-
    49 00000062 20636F6E2052657065-
    50 00000062 746963696F6E65733A-
    51 00000062 0D0A00             
    52 00000089 4572726F7220616272-    errMsgOpen db "Error abriendo archivo.", LF, NULL
    53 00000089 69656E646F20617263-
    54 00000089 6869766F2E0A00     
    55 000000A2 4572726F72206C6579-    errMsgRead db "Error leyendo archivo.", LF, NULL
    56 000000A2 656E646F2061726368-
    57 000000A2 69766F2E0A00       
    58 000000BA 4572726F7220657363-    errMsgWrite db "Error escribiendo archivo.", LF, NULL
    59 000000BA 72696269656E646F20-
    60 000000BA 6172636869766F2E0A-
    61 000000BA 00                 
    62 000000D6 4572726F723A206B20-    errMsgK db "Error: k debe ser entre 4 y 10.", LF, NULL
    63 000000D6 646562652073657220-
    64 000000D6 656E74726520342079-
    65 000000D6 2031302E0A00       
    66 000000F7 50616C616272617320-    successMsg db "Palabras guardadas en palabras.txt", LF, NULL
    67 000000F7 677561726461646173-
    68 000000F7 20656E2070616C6162-
    69 000000F7 7261732E7478740A00 
    70 0000011B 0D0A00                 crlf db 13, 10, 0
    71 0000011E 4572726F723A207365-    errMsgOverflow db "Error: secuencia de ADN demasiado grande.", LF, NULL
    72 0000011E 6375656E6369612064-
    73 0000011E 652041444E2064656D-
    74 0000011E 61736961646F206772-
    75 0000011E 616E64652E0A00     
    76 00000149 4572726F7220637265-    errMsgCreate db "Error creando archivo de salida.", LF, NULL
    77 00000149 616E646F2061726368-
    78 00000149 69766F206465207361-
    79 00000149 6C6964612E0A00     
    80 0000016B 4572726F7220636F64-    error_code_prefix db "Error code: ", 0
    81 0000016B 653A2000           
    82 00000178 0A00                   newline db 10, 0
    83                                 
    84                                 [section .bss]
    85 00000000 <gap>                  error_code resq 1
    86 00000008 <gap>                  error_msg resq 1
    87 00000010 <gap>                  readBuffer resb BUFF_SIZE
    88 00010010 <gap>                  adnBuffer resb MAX_ADN_SIZE
    89 007B1210 <gap>                  fileDesc resq 1
    90 007B1218 <gap>                  outFileDesc resq 1
    91 007B1220 <gap>                  kVal resb 1
    92 007B1221 <gap>                  adnLength resq 1
    93 007B1229 <gap>                  kmerList resb MAX_ADN_SIZE
    94 00F52429 <gap>                  kmerCounts resq MAX_ADN_SIZE
    95 04C5B429 <gap>                  tempKmer resb 16
    96 04C5B439 <gap>                  contador resq 1
    97 04C5B441 <gap>                  totalKmers resq 1
    98                                 
    99                                 
   100                                 [section .text]
   101                                 [global _start]
   102                                 
   103                                 _start:
   104 00000000 48C7C7[00000000]        mov rdi, header
   105 00000007 E81A010000              call printStr
   106                                 
   107 0000000C E814040000              call openInputFile
   108 00000011 4883F800                cmp rax, 0
   109 00000015 0F8C9D000000            jl _exitError
   110                                 
   111 0000001B E84B040000              call readFASTA
   112 00000020 4883F800                cmp rax, 0
   113 00000024 0F8C8E000000            jl _exitError
   114                                 
   115 0000002A 48C7C003000000          mov rax, SYS_close
   116 00000031 488B3C25[00000000]      mov rdi, [fileDesc]
   117 00000039 0F05                    syscall
   118                                 
   119 0000003B E8CD040000              call getKValue
   120 00000040 4883F800                cmp rax, 0
   121 00000044 7C76                    jl _exitError
   122                                 
   123 00000046 E861050000              call generateWords
   124 0000004B 4883F800                cmp rax, 0
   125 0000004F 7C6B                    jl _exitError
   126                                 
   127                                 
   128 00000051 48C7C055000000          mov rax, SYS_creat
   129 00000058 48C7C7[00000000]        mov rdi, outFileName
   130 0000005F 48C7C680010000          mov rsi, S_IRUSR | S_IWUSR
   131 00000066 0F05                    syscall
   132 00000068 4883F800                cmp rax, 0
   133 0000006C 7C4E                    jl _exitError
   134 0000006E 48890425[00000000]      mov [outFileDesc], rax
   135                                 
   136 00000076 E8FA000000              call ordenarYGuardarKmers
   137 0000007B E850010000              call ordenarKmers
   138                                 
   139 00000080 48C7C7[00000000]        mov rdi, ordenadoMsg
   140 00000087 E8C1000000              call printStrToFile
   141                                 
   142 0000008C E8DD010000              call contar_frecuencias
   143                                 
   144 00000091 48C7C003000000          mov rax, SYS_close
   145 00000098 488B3C25[00000000]      mov rdi, [outFileDesc]
   146 000000A0 0F05                    syscall
   147                                 
   148 000000A2 48C7C7[00000000]        mov rdi, successMsg
   149 000000A9 E878000000              call printStr
   150                                 
   151 000000AE 48C7C03C000000          mov rax, SYS_exit
   152 000000B5 48C7C700000000          mov rdi, EXIT_SUCCESS
   153 000000BC 0F05                    syscall
   154                                 
   155                                 
   156                                 _exitError:
   157                                 
   158 000000BE 488B3C25[00000000]      mov rdi, [error_msg]
   159 000000C6 E85B000000              call printStr
   160                                 
   161                                 
   162 000000CB 48C7C7[00000000]        mov rdi, error_code_prefix
   163 000000D2 E84F000000              call printStr
   164                                 
   165                                 
   166 000000D7 488B0425[00000000]      mov rax, [error_code]
   167 000000DF 48F7D8                  neg rax
   168 000000E2 48C7C30A000000          mov rbx, 10
   169 000000E9 488D3425[FFFF0000]      lea rsi, [readBuffer + BUFF_SIZE - 1]
   170 000000F1 C60600                  mov byte [rsi], 0
   171                                 
   172                                 .convert_loop:
   173 000000F4 48FFCE                  dec rsi
   174 000000F7 4831D2                  xor rdx, rdx
   175 000000FA 48F7F3                  div rbx
   176 000000FD 80C230                  add dl, '0'
   177 00000100 8816                    mov [rsi], dl
   178 00000102 4885C0                  test rax, rax
   179 00000105 75EB                    jnz .convert_loop
   180                                 
   181                                 
   182 00000107 4889F7                  mov rdi, rsi
   183 0000010A E817000000              call printStr
   184                                 
   185                                 
   186 0000010F 48C7C7[00000000]        mov rdi, newline
   187 00000116 E80B000000              call printStr
   188                                 
   189                                 
   190 0000011B 48C7C03C000000          mov rax, SYS_exit
   191 00000122 48C7C701000000          mov rdi, 1
   192 00000129 0F05                    syscall
   193                                 
   194                                 
   195                                 
   196                                 
   197                                 printStr:
   198 0000012B 53                      push rbx
   199                                 
   200 0000012C 4889FB                  mov rbx, rdi
   201 0000012F 4831D2                  xor rdx, rdx
   202                                 
   203                                 .cont:
   204 00000132 803C1300                cmp byte [rbx + rdx], 0
   205 00000136 7403                    je .done
   206 00000138 48FFC2                  inc rdx
   207 0000013B EBF3                    jmp .cont
   208                                 
   209                                 .done:
   210 0000013D 48C7C001000000          mov rax, SYS_write
   211 00000144 48C7C701000000          mov rdi, STDOUT
   212 0000014B 4889DE                  mov rsi, rbx
   213 0000014E 0F05                    syscall
   214                                 
   215 00000150 5B                      pop rbx
   216 00000151 C3                      ret
   217                                 
   218                                 
   219                                 printStrToFile:
   220 00000152 53                      push rbx
   221                                 
   222 00000153 4889FB                  mov rbx, rdi
   223 00000156 4831D2                  xor rdx, rdx
   224                                 
   225                                 .lenloop:
   226 00000159 803C1300                cmp byte [rbx + rdx], 0
   227 0000015D 7403                    je .write
   228 0000015F 48FFC2                  inc rdx
   229 00000162 EBF3                    jmp .lenloop
   230                                 
   231                                 .write:
   232 00000164 48C7C001000000          mov rax, SYS_write
   233 0000016B 488B3C25[00000000]      mov rdi, [outFileDesc]
   234 00000173 4889DE                  mov rsi, rbx
   235                                 
   236 00000176 0F05                    syscall
   237                                 
   238 00000178 5B                      pop rbx
   239 00000179 C3                      ret
   240                                 
   241                                 
   242                                 ordenarYGuardarKmers:
   243 0000017A 4831F6                  xor rsi, rsi
   244 0000017D 4831FF                  xor rdi, rdi
   245                                 
   246 00000180 480FB60C25[00000000]      movzx rcx, byte [kVal]
   247 00000189 488B1C25[00000000]      mov rbx, [adnLength]
   248                                 
   249 00000191 4839CB                  cmp rbx, rcx
   250 00000194 723C                    jb .fin
   251                                 
   252 00000196 4829CB                  sub rbx, rcx
   253 00000199 48FFC3                  inc rbx
   254 0000019C 48891C25[00000000]      mov [totalKmers], rbx
   255                                 
   256                                 .copiar:
   257 000001A4 4883FB00                cmp rbx, 0
   258 000001A8 7428                    je .fin
   259                                 
   260 000001AA 48C7C200000000          mov rdx, 0
   261                                 
   262                                 .loop_kmer:
   263 000001B1 4839CA                  cmp rdx, rcx
   264 000001B4 7411                    je .next
   265                                 
   266 000001B6 8A8416[00000000]        mov al, [adnBuffer + rsi + rdx]
   267 000001BD 888417[00000000]        mov [kmerList + rdi + rdx], al
   268 000001C4 48FFC2                  inc rdx
   269 000001C7 EBE6                    jmp .loop_kmer
   270                                 
   271                                 .next:
   272 000001C9 48FFC6                  inc rsi
   273 000001CC 4801CF                  add rdi, rcx
   274 000001CF 48FFCB                  dec rbx
   275 000001D2 EBCE                    jmp .copiar
   276                                 
   277                                 .fin:
   278 000001D4 C3                      ret
   279                                 
   280                                 
   281                                 ordenarKmers:
   282 000001D5 53                      push rbx
   283 000001D6 57                      push rdi
   284 000001D7 56                      push rsi
   285 000001D8 51                      push rcx
   286 000001D9 52                      push rdx
   287 000001DA 4150                    push r8
   288 000001DC 4151                    push r9
   289 000001DE 4154                    push r12
   290                                 
   291 000001E0 4C0FB60425[00000000]      movzx r8, byte [kVal]
   292 000001E9 488B1C25[00000000]      mov rbx, [totalKmers]
   293                                 
   294 000001F1 4883FB01                cmp rbx, 1
   295 000001F5 7E6E                    jle .fin
   296 000001F7 48FFCB                  dec rbx
   297                                 
   298                                 .outer:
   299 000001FA 4889D9                  mov rcx, rbx
   300 000001FD 4D31E4                  xor r12, r12
   301                                 
   302                                 .inner:
   303 00000200 4C89E6                  mov rsi, r12
   304 00000203 4C01C6                  add rsi, r8
   305 00000206 49C7C100000000          mov r9, 0
   306                                 
   307                                 .compare_loop:
   308 0000020D 4D39C1                  cmp r9, r8
   309 00000210 7446                    je .no_swap
   310                                 
   311 00000212 438A840C[00000000]      mov al, [kmerList + r12 + r9]
   312 0000021A 428A940E[00000000]      mov dl, [kmerList + rsi + r9]
   313 00000222 38D0                    cmp al, dl
   314 00000224 7232                    jb .no_swap
   315 00000226 7703                    ja .do_swap
   316 00000228 49FFC1                  inc r9
   317 0000022B EBDE                    jmp .compare_loop
   318                                 
   319                                 .do_swap:
   320 0000022D 4D31C9                  xor r9, r9
   321                                 
   322                                 .swap_loop:
   323 00000230 4D39C1                  cmp r9, r8
   324 00000233 7423                    je .next
   325 00000235 438A840C[00000000]      mov al, [kmerList + r12 + r9]
   326 0000023D 428A940E[00000000]      mov dl, [kmerList + rsi + r9]
   327 00000245 4388940C[00000000]      mov [kmerList + r12 + r9], dl
   328 0000024D 4288840E[00000000]      mov [kmerList + rsi + r9], al
   329 00000255 49FFC1                  inc r9
   330 00000258 EBD4                    jmp .swap_loop
   331                                 
   332                                 .no_swap:
   333                                 .next:
   334 0000025A 4D01C4                  add r12, r8
   335 0000025D 48FFC9                  dec rcx
   336 00000260 759C                    jnz .inner
   337 00000262 48FFCB                  dec rbx
   338 00000265 7591                    jnz .outer
   339                                 
   340                                 .fin:
   341                                 
   342 00000267 415C                    pop r12
   343 00000269 4159                    pop r9
   344 0000026B 4158                    pop r8
   345 0000026D 5A                      pop rdx
   346 0000026E 59                      pop rcx
   347 0000026F 5E                      pop rsi
   348 00000270 5F                      pop rdi
   349 00000271 5B                      pop rbx
   350 00000272 C3                      ret
   351                                 
   352                                 
   353                                 contar_frecuencias:
   354 00000273 488B1C25[00000000]      mov rbx, [totalKmers]
   355 0000027B 4883FB00                cmp rbx, 0
   356 0000027F 0F84A3000000            je .fin
   357                                 
   358 00000285 4831F6                  xor rsi, rsi
   359 00000288 4C0FB60425[00000000]      movzx r8, byte [kVal]
   360 00000291 49C7C101000000          mov r9, 1
   361                                 
   362                                 
   363 00000298 E813030000              call limpiar_tempKmer
   364 0000029D 4831C9                  xor rcx, rcx
   365                                 .copy_first:
   366 000002A0 4C39C1                  cmp rcx, r8
   367 000002A3 7410                    je .start_loop
   368 000002A5 8A840E[00000000]        mov al, [kmerList + rsi + rcx]
   369 000002AC 8881[00000000]          mov [tempKmer + rcx], al
   370 000002B2 48FFC1                  inc rcx
   371 000002B5 EBE7                    jmp .copy_first
   372                                 
   373                                 .start_loop:
   374 000002B7 4C01C6                  add rsi, r8
   375 000002BA 48FFCB                  dec rbx
   376 000002BD 7468                    jz .write_last
   377                                 
   378                                 .loop:
   379                                 
   380 000002BF 4831C9                  xor rcx, rcx
   381 000002C2 49C7C201000000          mov r10, 1
   382                                 
   383                                 .compare_loop:
   384 000002C9 4C39C1                  cmp rcx, r8
   385 000002CC 741B                    je .compare_done
   386 000002CE 8A81[00000000]          mov al, [tempKmer + rcx]
   387 000002D4 8A940E[00000000]        mov dl, [kmerList + rsi + rcx]
   388 000002DB 38D0                    cmp al, dl
   389 000002DD 7503                    jne .different
   390 000002DF 48FFC1                  inc rcx
   391 000002E2 EBE3                    jmp .compare_loop
   392                                 
   393                                 .different:
   394 000002E4 49C7C200000000          mov r10, 0
   395                                 
   396                                 .compare_done:
   397 000002EB 4983FA01                cmp r10, 1
   398 000002EF 742B                    je .same_kmer
   399                                 
   400                                 
   401 000002F1 E834000000              call escribir_kmer_freq
   402                                 
   403                                 
   404 000002F6 E8B5020000              call limpiar_tempKmer
   405 000002FB 4831C9                  xor rcx, rcx
   406                                 .copy_new:
   407 000002FE 4C39C1                  cmp rcx, r8
   408 00000301 7410                    je .reset_counter
   409 00000303 8A840E[00000000]        mov al, [kmerList + rsi + rcx]
   410 0000030A 8881[00000000]          mov [tempKmer + rcx], al
   411 00000310 48FFC1                  inc rcx
   412 00000313 EBE7                    jmp .copy_new
   413                                 
   414                                 .reset_counter:
   415 00000315 49C7C101000000          mov r9, 1
   416 0000031C EB01                    jmp .continue
   417                                 
   418                                 .same_kmer:
   419 0000031E 49FFC1                  inc r9
   420                                 
   421                                 .continue:
   422 00000321 4C01C6                  add rsi, r8
   423 00000324 48FFCB                  dec rbx
   424 00000327 7594                    jnz .loop
   425                                 
   426                                 .write_last:
   427                                 
   428 00000329 E8FCFFFFFF              call escribir_kmer_freq
   429                                 
   430                                 .fin:
   431 0000032E C3                      ret
   432                                 
   433                                 
   434                                 
   435                                 escribir_kmer_freq:
   436 0000032F 50                      push rax
   437 00000330 53                      push rbx
   438 00000331 51                      push rcx
   439 00000332 52                      push rdx
   440 00000333 56                      push rsi
   441 00000334 57                      push rdi
   442                                 
   443 00000335 4C0FB60425[00000000]      movzx r8, byte [kVal]
   444                                 
   445                                 
   446 0000033E 48C7C001000000          mov rax, SYS_write
   447 00000345 488B3C25[00000000]      mov rdi, [outFileDesc]
   448 0000034D 48C7C6[00000000]        mov rsi, tempKmer
   449 00000354 4C89C2                  mov rdx, r8
   450 00000357 0F05                    syscall
   451                                 
   452                                 
   453 00000359 48C7C001000000          mov rax, SYS_write
   454 00000360 488B3C25[00000000]      mov rdi, [outFileDesc]
   455 00000368 48C7C6[00000000]        mov rsi, separator
   456 0000036F 48C7C202000000          mov rdx, 2
   457 00000376 0F05                    syscall
   458                                 
   459                                 
   460 00000378 4C89C8                  mov rax, r9
   461 0000037B E821000000              call print_decimal_to_file
   462                                 
   463                                 
   464 00000380 48C7C001000000          mov rax, SYS_write
   465 00000387 488B3C25[00000000]      mov rdi, [outFileDesc]
   466 0000038F 48C7C6[00000000]        mov rsi, crlf
   467 00000396 48C7C202000000          mov rdx, 2
   468 0000039D 0F05                    syscall
   469                                 
   470                                 
   471 0000039F 5F                      pop rdi
   472 000003A0 5E                      pop rsi
   473 000003A1 5A                      pop rdx
   474 000003A2 59                      pop rcx
   475 000003A3 5B                      pop rbx
   476 000003A4 58                      pop rax
   477 000003A5 C3                      ret
   478                                 
   479                                 
   480                                 print_decimal_to_file:
   481 000003A6 53                      push rbx
   482 000003A7 51                      push rcx
   483 000003A8 52                      push rdx
   484 000003A9 56                      push rsi
   485                                 
   486 000003AA 4889C2                  mov rdx, rax
   487                                 
   488                                 
   489 000003AD 48C7C114000000          mov rcx, 20
   490 000003B4 48C7C000000100          mov rax, BUFF_SIZE
   491 000003BB 4829C8                  sub rax, rcx
   492 000003BE 488DB0[00000000]        lea rsi, [readBuffer + rax]
   493                                 
   494                                 .clear_loop:
   495 000003C5 C60600                  mov byte [rsi], 0
   496 000003C8 48FFC6                  inc rsi
   497 000003CB E2F6                    loop .clear_loop
   498                                 
   499                                 
   500 000003CD 488D1C25[00000100]      lea rbx, [readBuffer + BUFF_SIZE]
   501 000003D5 48C7C10A000000          mov rcx, 10
   502 000003DC 4883FA00                cmp rdx, 0
   503 000003E0 7506                    jne .convert
   504 000003E2 48FFCB                  dec rbx
   505 000003E5 C60330                  mov byte [rbx], '0'
   506 000003E8 EB1B                    jmp .print
   507                                 
   508                                 .convert:
   509 000003EA 4831C0                  xor rax, rax
   510 000003ED 4889D0                  mov rax, rdx
   511 000003F0 4831D2                  xor rdx, rdx
   512                                 
   513                                 .div_loop:
   514 000003F3 48F7F1                  div rcx
   515 000003F6 80C230                  add dl, '0'
   516 000003F9 48FFCB                  dec rbx
   517 000003FC 8813                    mov [rbx], dl
   518 000003FE 4831D2                  xor rdx, rdx
   519 00000401 4883F800                cmp rax, 0
   520 00000405 75EA                    jne .div_loop
   521                                 
   522                                 .print:
   523 00000407 4889DE                  mov rsi, rbx
   524 0000040A 48C7C2[00000100]        mov rdx, readBuffer + BUFF_SIZE
   525 00000411 4829DA                  sub rdx, rbx
   526 00000414 48C7C001000000          mov rax, SYS_write
   527 0000041B 488B3C25[00000000]      mov rdi, [outFileDesc]
   528 00000423 0F05                    syscall
   529                                 
   530                                 
   531 00000425 5E                      pop rsi
   532 00000426 5A                      pop rdx
   533 00000427 59                      pop rcx
   534 00000428 5B                      pop rbx
   535 00000429 C3                      ret
   536                                 
   537                                 
   538                                 
   539                                 openInputFile:
   540 0000042A 48C7C002000000          mov rax, SYS_open
   541 00000431 48C7C7[00000000]        mov rdi, fileName
   542 00000438 48C7C600000000          mov rsi, O_RDONLY
   543 0000043F 0F05                    syscall
   544 00000441 4883F800                cmp rax, 0
   545 00000445 7C0A                    jl .error
   546                                 
   547 00000447 48890425[00000000]      mov [fileDesc], rax
   548 0000044F 4831C0                  xor rax, rax
   549 00000452 C3                      ret
   550                                 .error:
   551 00000453 48C70425[00000000]-     mov qword [error_msg], errMsgOpen
   552 00000453 [00000000]         
   553 0000045F 48C70425[00000000]-     mov qword [error_code], -2
   554 0000045F FEFFFFFF           
   555 0000046B E949FCFFFF              jmp _exitError
   556                                 
   557                                 
   558                                 
   559                                 
   560                                 
   561                                 readFASTA:
   562 00000470 4D31FF                  xor r15, r15
   563 00000473 4D31E4                  xor r12, r12
   564                                 
   565                                 .nextBlock:
   566 00000476 48C7C000000000          mov rax, SYS_read
   567 0000047D 488B3C25[00000000]      mov rdi, [fileDesc]
   568 00000485 48C7C6[00000000]        mov rsi, readBuffer
   569 0000048C 48C7C200000100          mov rdx, BUFF_SIZE
   570 00000493 0F05                    syscall
   571 00000495 4883F800                cmp rax, 0
   572 00000499 7E69                    jle .done
   573 0000049B 4989C6                  mov r14, rax
   574 0000049E 4D31ED                  xor r13, r13
   575                                 
   576                                 .nextByte:
   577 000004A1 4D39F5                  cmp r13, r14
   578 000004A4 74CE                    je .nextBlock
   579 000004A6 418A85[00000000]        mov al, [readBuffer + r13]
   580 000004AD 49FFC5                  inc r13
   581                                 
   582 000004B0 4D85E4                  test r12, r12
   583 000004B3 7546                    jnz .inHeader
   584                                 
   585 000004B5 3C3E                    cmp al, '>'
   586 000004B7 7439                    je .setHeader
   587 000004B9 3C0A                    cmp al, LF
   588 000004BB 7433                    je .skip
   589 000004BD 3C0D                    cmp al, 13
   590 000004BF 742F                    je .skip
   591 000004C1 3C3B                    cmp al, ';'
   592 000004C3 742B                    je .skip
   593                                 
   594                                 
   595 000004C5 3C41                    cmp al, 'A'
   596 000004C7 7414                    je .store
   597 000004C9 3C43                    cmp al, 'C'
   598 000004CB 7410                    je .store
   599 000004CD 3C47                    cmp al, 'G'
   600 000004CF 740C                    je .store
   601 000004D1 3C54                    cmp al, 'T'
   602 000004D3 7408                    je .store
   603                                 
   604                                 
   605 000004D5 3C61                    cmp al, 'a'
   606 000004D7 7217                    jb .skip
   607 000004D9 3C7A                    cmp al, 'z'
   608 000004DB 7713                    ja .skip
   609 000004DD 2C20                    sub al, 32
   610                                 
   611                                 .store:
   612 000004DF 418887[00000000]        mov [adnBuffer + r15], al
   613 000004E6 49FFC7                  inc r15
   614 000004E9 4981FF00127A00          cmp r15, MAX_ADN_SIZE
   615 000004F0 7312                    jae .done
   616                                 .skip:
   617 000004F2 EBAB                    jmp .nextByte
   618                                 
   619                                 .setHeader:
   620 000004F4 49C7C401000000          mov r12, 1
   621 000004FB EBF3                    jmp .skip
   622                                 
   623                                 .inHeader:
   624 000004FD 3C0A                    cmp al, LF
   625 000004FF 75EF                    jne .skip
   626 00000501 4D31E4                  xor r12, r12
   627 00000504 EBEA                    jmp .skip
   628                                 
   629                                 .done:
   630 00000506 4C893C25[00000000]      mov [adnLength], r15
   631 0000050E 4831C0                  xor rax, rax
   632 00000511 C3                      ret
   633                                 
   634                                 
   635                                 getKValue:
   636 00000512 48C7C7[00000000]        mov rdi, promptK
   637 00000519 E808FCFFFF              call printStr
   638                                 
   639                                 
   640 0000051E 48C7C000000000          mov rax, SYS_read
   641 00000525 48C7C700000000          mov rdi, STDIN
   642 0000052C 48C7C6[00000000]        mov rsi, readBuffer
   643 00000533 48C7C204000000          mov rdx, 4
   644 0000053A 0F05                    syscall
   645                                 
   646                                 
   647 0000053C 480FB60425[00000000]      movzx rax, byte [readBuffer]
   648 00000545 4883F830                cmp rax, '0'
   649 00000549 7C50                    jl .error
   650 0000054B 4883F839                cmp rax, '9'
   651 0000054F 7F4A                    jg .error
   652                                 
   653                                 
   654 00000551 4883E830                sub rax, '0'
   655 00000555 4889C3                  mov rbx, rax
   656                                 
   657                                 
   658 00000558 480FB60425[01000000]      movzx rax, byte [readBuffer + 1]
   659 00000561 4883F830                cmp rax, '0'
   660 00000565 7C1D                    jl .single_digit
   661 00000567 4883F839                cmp rax, '9'
   662 0000056B 7F17                    jg .single_digit
   663 0000056D 4883F80A                cmp rax, 10
   664 00000571 7411                    je .single_digit
   665 00000573 4883F80D                cmp rax, 13
   666 00000577 740B                    je .single_digit
   667                                 
   668                                 
   669 00000579 4883E830                sub rax, '0'
   670 0000057D 486BDB0A                imul rbx, 10
   671 00000581 4801C3                  add rbx, rax
   672 00000584 EBFE                    jmp .validate
   673                                 
   674                                 .single_digit:
   675                                 
   676                                 
   677                                 .validate:
   678                                 
   679 00000586 4883FB04                cmp rbx, 4
   680 0000058A 7C0F                    jl .error
   681 0000058C 4883FB0A                cmp rbx, 10
   682 00000590 7F09                    jg .error
   683                                 
   684                                 
   685 00000592 881C25[00000000]        mov [kVal], bl
   686 00000599 4831C0                  xor rax, rax
   687 0000059C C3                      ret
   688                                 
   689                                 .error:
   690 0000059D 48C7C7[00000000]        mov rdi, errMsgK
   691 000005A4 E87DFBFFFF              call printStr
   692 000005A9 48C7C0FFFFFFFF          mov rax, -1
   693 000005B0 C3                      ret
   694                                 
   695                                 
   696                                 
   697                                 generateWords:
   698                                 
   699 000005B1 4831C0                  xor rax, rax
   700 000005B4 C3                      ret
   701                                 
   702                                 
   703                                 
   704                                 limpiar_tempKmer:
   705 000005B5 50                      push rax
   706 000005B6 51                      push rcx
   707 000005B7 4831C9                  xor rcx, rcx
   708 000005BA 48C7C010000000          mov rax, 16
   709                                 .limpiar_loop:
   710 000005C1 C681[00000000]00        mov byte [tempKmer + rcx], 0
   711 000005C8 48FFC1                  inc rcx
   712 000005CB 48FFC8                  dec rax
   713 000005CE 75EF                    jnz .limpiar_loop
   714 000005D0 59                      pop rcx
   715 000005D1 58                      pop rax
   716 000005D2 C3                      ret
   717                                 
   718                                 

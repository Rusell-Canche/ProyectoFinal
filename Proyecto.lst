     1                                 %line 1+1 Proyecto.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 [section .data]
    10                                 
    11                                 LF equ 10
    12                                 NULL equ 0
    13                                 EXIT_SUCCESS equ 0
    14                                 STDIN equ 0
    15                                 STDOUT equ 1
    16                                 STDERR equ 2
    17                                 SYS_read equ 0
    18                                 SYS_write equ 1
    19                                 SYS_open equ 2
    20                                 SYS_close equ 3
    21                                 SYS_exit equ 60
    22                                 SYS_creat equ 85
    23                                 O_RDONLY equ 000000
    24                                 O_WRONLY equ 000001
    25                                 O_CREAT equ 0x40
    26                                 O_TRUNC equ 0x200
    27                                 O_APPEND equ 0x400
    28                                 S_IRUSR equ 00400
    29                                 S_IWUSR equ 00200
    30                                 BUFF_SIZE equ 65536
    31                                 MAX_ADN_SIZE equ 8000000
    32 00000000 3A2000                 separator db ": ", 0
    33 00000003 416E616C697A61646F-    header db "Analizador de palabras de ADN", LF, LF, NULL
    34 00000003 722064652070616C61-
    35 00000003 627261732064652041-
    36 00000003 444E0A0A00         
    37 00000023 5072756562612E7478-    fileName db "Prueba.txt", NULL
    38 00000023 7400               
    39 0000002E 70616C61627261732E-    outFileName db "palabras.txt", NULL
    40 0000002E 74787400           
    41 0000003B 496E6772657365206C-    promptK db "Ingrese longitud de palabra (4-10): ", NULL
    42 0000003B 6F6E67697475642064-
    43 0000003B 652070616C61627261-
    44 0000003B 2028342D3130293A20-
    45 0000003B 00                 
    46 00000060 2000                   espacio db " ", 0
    47 00000062 50616C616272617320-    ordenadoMsg db "Palabras Ordenadas con Repeticiones:", 13, 10, 0
    48 00000062 4F7264656E61646173-
    49 00000062 20636F6E2052657065-
    50 00000062 746963696F6E65733A-
    51 00000062 0D0A00             
    52 00000089 4572726F7220616272-    errMsgOpen db "Error abriendo archivo.", LF, NULL
    53 00000089 69656E646F20617263-
    54 00000089 6869766F2E0A00     
    55 000000A2 4572726F72206C6579-    errMsgRead db "Error leyendo archivo.", LF, NULL
    56 000000A2 656E646F2061726368-
    57 000000A2 69766F2E0A00       
    58 000000BA 4572726F7220657363-    errMsgWrite db "Error escribiendo archivo.", LF, NULL
    59 000000BA 72696269656E646F20-
    60 000000BA 6172636869766F2E0A-
    61 000000BA 00                 
    62 000000D6 4572726F723A206B20-    errMsgK db "Error: k debe ser entre 4 y 10.", LF, NULL
    63 000000D6 646562652073657220-
    64 000000D6 656E74726520342079-
    65 000000D6 2031302E0A00       
    66 000000F7 50616C616272617320-    successMsg db "Palabras guardadas en palabras.txt", LF, NULL
    67 000000F7 677561726461646173-
    68 000000F7 20656E2070616C6162-
    69 000000F7 7261732E7478740A00 
    70 0000011B 0D0A00                 crlf db 13, 10, 0
    71                                 
    72                                 [section .bss]
    73                                 
    74 00000000 <gap>                  readBuffer resb BUFF_SIZE
    75 00010000 <gap>                  adnBuffer resb MAX_ADN_SIZE
    76 007B1200 <gap>                  fileDesc resq 1
    77 007B1208 <gap>                  outFileDesc resq 1
    78 007B1210 <gap>                  kVal resb 1
    79 007B1211 <gap>                  adnLength resq 1
    80 007B1219 <gap>                  kmerList resb MAX_ADN_SIZE
    81 00F52419 <gap>                  kmerCounts resq MAX_ADN_SIZE
    82 04C5B419 <gap>                  tempKmer resb 16
    83 04C5B429 <gap>                  contador resq 1
    84 04C5B431 <gap>                  totalKmers resq 1
    85                                 
    86                                 
    87                                 [section .text]
    88                                 [global _start]
    89                                 
    90                                 _start:
    91 00000000 48C7C7[00000000]        mov rdi, header
    92 00000007 E8BD000000              call printStr
    93                                 
    94 0000000C E8B7030000              call openInputFile
    95 00000011 4883F800                cmp rax, 0
    96 00000015 0F8C9D000000            jl _exitError
    97                                 
    98 0000001B E8E5030000              call readFASTA
    99 00000020 4883F800                cmp rax, 0
   100 00000024 0F8C8E000000            jl _exitError
   101                                 
   102 0000002A 48C7C003000000          mov rax, SYS_close
   103 00000031 488B3C25[00000000]      mov rdi, [fileDesc]
   104 00000039 0F05                    syscall
   105                                 
   106 0000003B E867040000              call getKValue
   107 00000040 4883F800                cmp rax, 0
   108 00000044 7C76                    jl _exitError
   109                                 
   110 00000046 E8FB040000              call generateWords
   111 0000004B 4883F800                cmp rax, 0
   112 0000004F 7C6B                    jl _exitError
   113                                 
   114                                 
   115 00000051 48C7C055000000          mov rax, SYS_creat
   116 00000058 48C7C7[00000000]        mov rdi, outFileName
   117 0000005F 48C7C680010000          mov rsi, S_IRUSR | S_IWUSR
   118 00000066 0F05                    syscall
   119 00000068 4883F800                cmp rax, 0
   120 0000006C 7C4E                    jl _exitError
   121 0000006E 48890425[00000000]      mov [outFileDesc], rax
   122                                 
   123 00000076 E89D000000              call ordenarYGuardarKmers
   124 0000007B E8F3000000              call ordenarKmers
   125                                 
   126 00000080 48C7C7[00000000]        mov rdi, ordenadoMsg
   127 00000087 E864000000              call printStrToFile
   128                                 
   129 0000008C E880010000              call contar_frecuencias
   130                                 
   131 00000091 48C7C003000000          mov rax, SYS_close
   132 00000098 488B3C25[00000000]      mov rdi, [outFileDesc]
   133 000000A0 0F05                    syscall
   134                                 
   135 000000A2 48C7C7[00000000]        mov rdi, successMsg
   136 000000A9 E81B000000              call printStr
   137                                 
   138 000000AE 48C7C03C000000          mov rax, SYS_exit
   139 000000B5 48C7C700000000          mov rdi, EXIT_SUCCESS
   140 000000BC 0F05                    syscall
   141                                 
   142                                 _exitError:
   143 000000BE 48C7C03C000000          mov rax, SYS_exit
   144 000000C5 48C7C701000000          mov rdi, 1
   145 000000CC 0F05                    syscall
   146                                 
   147                                 
   148                                 printStr:
   149 000000CE 53                      push rbx
   150                                 
   151 000000CF 4889FB                  mov rbx, rdi
   152 000000D2 4831D2                  xor rdx, rdx
   153                                 
   154                                 .cont:
   155 000000D5 803C1300                cmp byte [rbx + rdx], 0
   156 000000D9 7403                    je .done
   157 000000DB 48FFC2                  inc rdx
   158 000000DE EBF3                    jmp .cont
   159                                 
   160                                 .done:
   161 000000E0 48C7C001000000          mov rax, SYS_write
   162 000000E7 48C7C701000000          mov rdi, STDOUT
   163 000000EE 4889DE                  mov rsi, rbx
   164 000000F1 0F05                    syscall
   165                                 
   166 000000F3 5B                      pop rbx
   167 000000F4 C3                      ret
   168                                 
   169                                 
   170                                 printStrToFile:
   171 000000F5 53                      push rbx
   172                                 
   173 000000F6 4889FB                  mov rbx, rdi
   174 000000F9 4831D2                  xor rdx, rdx
   175                                 
   176                                 .lenloop:
   177 000000FC 803C1300                cmp byte [rbx + rdx], 0
   178 00000100 7403                    je .write
   179 00000102 48FFC2                  inc rdx
   180 00000105 EBF3                    jmp .lenloop
   181                                 
   182                                 .write:
   183 00000107 48C7C001000000          mov rax, SYS_write
   184 0000010E 488B3C25[00000000]      mov rdi, [outFileDesc]
   185 00000116 4889DE                  mov rsi, rbx
   186                                 
   187 00000119 0F05                    syscall
   188                                 
   189 0000011B 5B                      pop rbx
   190 0000011C C3                      ret
   191                                 
   192                                 
   193                                 ordenarYGuardarKmers:
   194 0000011D 4831F6                  xor rsi, rsi
   195 00000120 4831FF                  xor rdi, rdi
   196                                 
   197 00000123 480FB60C25[00000000]      movzx rcx, byte [kVal]
   198 0000012C 488B1C25[00000000]      mov rbx, [adnLength]
   199                                 
   200 00000134 4839CB                  cmp rbx, rcx
   201 00000137 723C                    jb .fin
   202                                 
   203 00000139 4829CB                  sub rbx, rcx
   204 0000013C 48FFC3                  inc rbx
   205 0000013F 48891C25[00000000]      mov [totalKmers], rbx
   206                                 
   207                                 .copiar:
   208 00000147 4883FB00                cmp rbx, 0
   209 0000014B 7428                    je .fin
   210                                 
   211 0000014D 48C7C200000000          mov rdx, 0
   212                                 
   213                                 .loop_kmer:
   214 00000154 4839CA                  cmp rdx, rcx
   215 00000157 7411                    je .next
   216                                 
   217 00000159 8A8416[00000000]        mov al, [adnBuffer + rsi + rdx]
   218 00000160 888417[00000000]        mov [kmerList + rdi + rdx], al
   219 00000167 48FFC2                  inc rdx
   220 0000016A EBE6                    jmp .loop_kmer
   221                                 
   222                                 .next:
   223 0000016C 48FFC6                  inc rsi
   224 0000016F 4801CF                  add rdi, rcx
   225 00000172 48FFCB                  dec rbx
   226 00000175 EBCE                    jmp .copiar
   227                                 
   228                                 .fin:
   229 00000177 C3                      ret
   230                                 
   231                                 
   232                                 ordenarKmers:
   233 00000178 53                      push rbx
   234 00000179 57                      push rdi
   235 0000017A 56                      push rsi
   236 0000017B 51                      push rcx
   237 0000017C 52                      push rdx
   238 0000017D 4150                    push r8
   239 0000017F 4151                    push r9
   240 00000181 4154                    push r12
   241                                 
   242 00000183 4C0FB60425[00000000]      movzx r8, byte [kVal]
   243 0000018C 488B1C25[00000000]      mov rbx, [totalKmers]
   244                                 
   245 00000194 4883FB01                cmp rbx, 1
   246 00000198 7E6E                    jle .fin
   247 0000019A 48FFCB                  dec rbx
   248                                 
   249                                 .outer:
   250 0000019D 4889D9                  mov rcx, rbx
   251 000001A0 4D31E4                  xor r12, r12
   252                                 
   253                                 .inner:
   254 000001A3 4C89E6                  mov rsi, r12
   255 000001A6 4C01C6                  add rsi, r8
   256 000001A9 49C7C100000000          mov r9, 0
   257                                 
   258                                 .compare_loop:
   259 000001B0 4D39C1                  cmp r9, r8
   260 000001B3 7446                    je .no_swap
   261                                 
   262 000001B5 438A840C[00000000]      mov al, [kmerList + r12 + r9]
   263 000001BD 428A940E[00000000]      mov dl, [kmerList + rsi + r9]
   264 000001C5 38D0                    cmp al, dl
   265 000001C7 7232                    jb .no_swap
   266 000001C9 7703                    ja .do_swap
   267 000001CB 49FFC1                  inc r9
   268 000001CE EBDE                    jmp .compare_loop
   269                                 
   270                                 .do_swap:
   271 000001D0 4D31C9                  xor r9, r9
   272                                 
   273                                 .swap_loop:
   274 000001D3 4D39C1                  cmp r9, r8
   275 000001D6 7423                    je .next
   276 000001D8 438A840C[00000000]      mov al, [kmerList + r12 + r9]
   277 000001E0 428A940E[00000000]      mov dl, [kmerList + rsi + r9]
   278 000001E8 4388940C[00000000]      mov [kmerList + r12 + r9], dl
   279 000001F0 4288840E[00000000]      mov [kmerList + rsi + r9], al
   280 000001F8 49FFC1                  inc r9
   281 000001FB EBD4                    jmp .swap_loop
   282                                 
   283                                 .no_swap:
   284                                 .next:
   285 000001FD 4D01C4                  add r12, r8
   286 00000200 48FFC9                  dec rcx
   287 00000203 759C                    jnz .inner
   288 00000205 48FFCB                  dec rbx
   289 00000208 7591                    jnz .outer
   290                                 
   291                                 .fin:
   292                                 
   293 0000020A 415C                    pop r12
   294 0000020C 4159                    pop r9
   295 0000020E 4158                    pop r8
   296 00000210 5A                      pop rdx
   297 00000211 59                      pop rcx
   298 00000212 5E                      pop rsi
   299 00000213 5F                      pop rdi
   300 00000214 5B                      pop rbx
   301 00000215 C3                      ret
   302                                 
   303                                 
   304                                 contar_frecuencias:
   305 00000216 488B1C25[00000000]      mov rbx, [totalKmers]
   306 0000021E 4883FB00                cmp rbx, 0
   307 00000222 0F84A3000000            je .fin
   308                                 
   309 00000228 4831F6                  xor rsi, rsi
   310 0000022B 4C0FB60425[00000000]      movzx r8, byte [kVal]
   311 00000234 49C7C101000000          mov r9, 1
   312                                 
   313                                 
   314 0000023B E80A030000              call limpiar_tempKmer
   315 00000240 4831C9                  xor rcx, rcx
   316                                 .copy_first:
   317 00000243 4C39C1                  cmp rcx, r8
   318 00000246 7410                    je .start_loop
   319 00000248 8A840E[00000000]        mov al, [kmerList + rsi + rcx]
   320 0000024F 8881[00000000]          mov [tempKmer + rcx], al
   321 00000255 48FFC1                  inc rcx
   322 00000258 EBE7                    jmp .copy_first
   323                                 
   324                                 .start_loop:
   325 0000025A 4C01C6                  add rsi, r8
   326 0000025D 48FFCB                  dec rbx
   327 00000260 7468                    jz .write_last
   328                                 
   329                                 .loop:
   330                                 
   331 00000262 4831C9                  xor rcx, rcx
   332 00000265 49C7C201000000          mov r10, 1
   333                                 
   334                                 .compare_loop:
   335 0000026C 4C39C1                  cmp rcx, r8
   336 0000026F 741B                    je .compare_done
   337 00000271 8A81[00000000]          mov al, [tempKmer + rcx]
   338 00000277 8A940E[00000000]        mov dl, [kmerList + rsi + rcx]
   339 0000027E 38D0                    cmp al, dl
   340 00000280 7503                    jne .different
   341 00000282 48FFC1                  inc rcx
   342 00000285 EBE3                    jmp .compare_loop
   343                                 
   344                                 .different:
   345 00000287 49C7C200000000          mov r10, 0
   346                                 
   347                                 .compare_done:
   348 0000028E 4983FA01                cmp r10, 1
   349 00000292 742B                    je .same_kmer
   350                                 
   351                                 
   352 00000294 E834000000              call escribir_kmer_freq
   353                                 
   354                                 
   355 00000299 E8AC020000              call limpiar_tempKmer
   356 0000029E 4831C9                  xor rcx, rcx
   357                                 .copy_new:
   358 000002A1 4C39C1                  cmp rcx, r8
   359 000002A4 7410                    je .reset_counter
   360 000002A6 8A840E[00000000]        mov al, [kmerList + rsi + rcx]
   361 000002AD 8881[00000000]          mov [tempKmer + rcx], al
   362 000002B3 48FFC1                  inc rcx
   363 000002B6 EBE7                    jmp .copy_new
   364                                 
   365                                 .reset_counter:
   366 000002B8 49C7C101000000          mov r9, 1
   367 000002BF EB01                    jmp .continue
   368                                 
   369                                 .same_kmer:
   370 000002C1 49FFC1                  inc r9
   371                                 
   372                                 .continue:
   373 000002C4 4C01C6                  add rsi, r8
   374 000002C7 48FFCB                  dec rbx
   375 000002CA 7594                    jnz .loop
   376                                 
   377                                 .write_last:
   378                                 
   379 000002CC E8FCFFFFFF              call escribir_kmer_freq
   380                                 
   381                                 .fin:
   382 000002D1 C3                      ret
   383                                 
   384                                 
   385                                 
   386                                 escribir_kmer_freq:
   387 000002D2 50                      push rax
   388 000002D3 53                      push rbx
   389 000002D4 51                      push rcx
   390 000002D5 52                      push rdx
   391 000002D6 56                      push rsi
   392 000002D7 57                      push rdi
   393                                 
   394 000002D8 4C0FB60425[00000000]      movzx r8, byte [kVal]
   395                                 
   396                                 
   397 000002E1 48C7C001000000          mov rax, SYS_write
   398 000002E8 488B3C25[00000000]      mov rdi, [outFileDesc]
   399 000002F0 48C7C6[00000000]        mov rsi, tempKmer
   400 000002F7 4C89C2                  mov rdx, r8
   401 000002FA 0F05                    syscall
   402                                 
   403                                 
   404 000002FC 48C7C001000000          mov rax, SYS_write
   405 00000303 488B3C25[00000000]      mov rdi, [outFileDesc]
   406 0000030B 48C7C6[00000000]        mov rsi, separator
   407 00000312 48C7C202000000          mov rdx, 2
   408 00000319 0F05                    syscall
   409                                 
   410                                 
   411 0000031B 4C89C8                  mov rax, r9
   412 0000031E E821000000              call print_decimal_to_file
   413                                 
   414                                 
   415 00000323 48C7C001000000          mov rax, SYS_write
   416 0000032A 488B3C25[00000000]      mov rdi, [outFileDesc]
   417 00000332 48C7C6[00000000]        mov rsi, crlf
   418 00000339 48C7C202000000          mov rdx, 2
   419 00000340 0F05                    syscall
   420                                 
   421                                 
   422 00000342 5F                      pop rdi
   423 00000343 5E                      pop rsi
   424 00000344 5A                      pop rdx
   425 00000345 59                      pop rcx
   426 00000346 5B                      pop rbx
   427 00000347 58                      pop rax
   428 00000348 C3                      ret
   429                                 
   430                                 
   431                                 print_decimal_to_file:
   432 00000349 53                      push rbx
   433 0000034A 51                      push rcx
   434 0000034B 52                      push rdx
   435 0000034C 56                      push rsi
   436                                 
   437 0000034D 4889C2                  mov rdx, rax
   438                                 
   439                                 
   440 00000350 48C7C114000000          mov rcx, 20
   441 00000357 48C7C000000100          mov rax, BUFF_SIZE
   442 0000035E 4829C8                  sub rax, rcx
   443 00000361 488DB0[00000000]        lea rsi, [readBuffer + rax]
   444                                 
   445                                 .clear_loop:
   446 00000368 C60600                  mov byte [rsi], 0
   447 0000036B 48FFC6                  inc rsi
   448 0000036E E2F6                    loop .clear_loop
   449                                 
   450                                 
   451 00000370 488D1C25[00000100]      lea rbx, [readBuffer + BUFF_SIZE]
   452 00000378 48C7C10A000000          mov rcx, 10
   453 0000037F 4883FA00                cmp rdx, 0
   454 00000383 7506                    jne .convert
   455 00000385 48FFCB                  dec rbx
   456 00000388 C60330                  mov byte [rbx], '0'
   457 0000038B EB1B                    jmp .print
   458                                 
   459                                 .convert:
   460 0000038D 4831C0                  xor rax, rax
   461 00000390 4889D0                  mov rax, rdx
   462 00000393 4831D2                  xor rdx, rdx
   463                                 
   464                                 .div_loop:
   465 00000396 48F7F1                  div rcx
   466 00000399 80C230                  add dl, '0'
   467 0000039C 48FFCB                  dec rbx
   468 0000039F 8813                    mov [rbx], dl
   469 000003A1 4831D2                  xor rdx, rdx
   470 000003A4 4883F800                cmp rax, 0
   471 000003A8 75EA                    jne .div_loop
   472                                 
   473                                 .print:
   474 000003AA 4889DE                  mov rsi, rbx
   475 000003AD 48C7C2[00000100]        mov rdx, readBuffer + BUFF_SIZE
   476 000003B4 4829DA                  sub rdx, rbx
   477 000003B7 48C7C001000000          mov rax, SYS_write
   478 000003BE 488B3C25[00000000]      mov rdi, [outFileDesc]
   479 000003C6 0F05                    syscall
   480                                 
   481                                 
   482 000003C8 5E                      pop rsi
   483 000003C9 5A                      pop rdx
   484 000003CA 59                      pop rcx
   485 000003CB 5B                      pop rbx
   486 000003CC C3                      ret
   487                                 
   488                                 
   489                                 
   490                                 openInputFile:
   491 000003CD 48C7C002000000          mov rax, SYS_open
   492 000003D4 48C7C7[00000000]        mov rdi, fileName
   493 000003DB 48C7C600000000          mov rsi, O_RDONLY
   494 000003E2 0F05                    syscall
   495 000003E4 4883F800                cmp rax, 0
   496 000003E8 7C0A                    jl .error
   497 000003EA 48890425[00000000]      mov [fileDesc], rax
   498 000003F2 4831C0                  xor rax, rax
   499 000003F5 C3                      ret
   500                                 
   501                                 .error:
   502 000003F6 48C7C7[00000000]        mov rdi, errMsgOpen
   503 000003FD E8C7FCFFFF              call printStr
   504 00000402 48C7C0FFFFFFFF          mov rax, -1
   505 00000409 C3                      ret
   506                                 
   507                                 
   508                                 
   509                                 
   510                                 readFASTA:
   511 0000040A 4D31FF                  xor r15, r15
   512 0000040D 4D31E4                  xor r12, r12
   513                                 
   514                                 .nextBlock:
   515 00000410 48C7C000000000          mov rax, SYS_read
   516 00000417 488B3C25[00000000]      mov rdi, [fileDesc]
   517 0000041F 48C7C6[00000000]        mov rsi, readBuffer
   518 00000426 48C7C200000100          mov rdx, BUFF_SIZE
   519 0000042D 0F05                    syscall
   520 0000042F 4883F800                cmp rax, 0
   521 00000433 7E69                    jle .done
   522 00000435 4989C6                  mov r14, rax
   523 00000438 4D31ED                  xor r13, r13
   524                                 
   525                                 .nextByte:
   526 0000043B 4D39F5                  cmp r13, r14
   527 0000043E 74CE                    je .nextBlock
   528 00000440 418A85[00000000]        mov al, [readBuffer + r13]
   529 00000447 49FFC5                  inc r13
   530                                 
   531 0000044A 4D85E4                  test r12, r12
   532 0000044D 7546                    jnz .inHeader
   533                                 
   534 0000044F 3C3E                    cmp al, '>'
   535 00000451 7439                    je .setHeader
   536 00000453 3C0A                    cmp al, LF
   537 00000455 7433                    je .skip
   538 00000457 3C0D                    cmp al, 13
   539 00000459 742F                    je .skip
   540 0000045B 3C3B                    cmp al, ';'
   541 0000045D 742B                    je .skip
   542                                 
   543                                 
   544 0000045F 3C41                    cmp al, 'A'
   545 00000461 7414                    je .store
   546 00000463 3C43                    cmp al, 'C'
   547 00000465 7410                    je .store
   548 00000467 3C47                    cmp al, 'G'
   549 00000469 740C                    je .store
   550 0000046B 3C54                    cmp al, 'T'
   551 0000046D 7408                    je .store
   552                                 
   553                                 
   554 0000046F 3C61                    cmp al, 'a'
   555 00000471 7217                    jb .skip
   556 00000473 3C7A                    cmp al, 'z'
   557 00000475 7713                    ja .skip
   558 00000477 2C20                    sub al, 32
   559                                 
   560                                 .store:
   561 00000479 418887[00000000]        mov [adnBuffer + r15], al
   562 00000480 49FFC7                  inc r15
   563 00000483 4981FF00127A00          cmp r15, MAX_ADN_SIZE
   564 0000048A 7312                    jae .done
   565                                 .skip:
   566 0000048C EBAB                    jmp .nextByte
   567                                 
   568                                 .setHeader:
   569 0000048E 49C7C401000000          mov r12, 1
   570 00000495 EBF3                    jmp .skip
   571                                 
   572                                 .inHeader:
   573 00000497 3C0A                    cmp al, LF
   574 00000499 75EF                    jne .skip
   575 0000049B 4D31E4                  xor r12, r12
   576 0000049E EBEA                    jmp .skip
   577                                 
   578                                 .done:
   579 000004A0 4C893C25[00000000]      mov [adnLength], r15
   580 000004A8 4831C0                  xor rax, rax
   581 000004AB C3                      ret
   582                                 
   583                                 
   584                                 getKValue:
   585 000004AC 48C7C7[00000000]        mov rdi, promptK
   586 000004B3 E811FCFFFF              call printStr
   587                                 
   588                                 
   589 000004B8 48C7C000000000          mov rax, SYS_read
   590 000004BF 48C7C700000000          mov rdi, STDIN
   591 000004C6 48C7C6[00000000]        mov rsi, readBuffer
   592 000004CD 48C7C204000000          mov rdx, 4
   593 000004D4 0F05                    syscall
   594                                 
   595                                 
   596 000004D6 480FB60425[00000000]      movzx rax, byte [readBuffer]
   597 000004DF 4883F830                cmp rax, '0'
   598 000004E3 7C50                    jl .error
   599 000004E5 4883F839                cmp rax, '9'
   600 000004E9 7F4A                    jg .error
   601                                 
   602                                 
   603 000004EB 4883E830                sub rax, '0'
   604 000004EF 4889C3                  mov rbx, rax
   605                                 
   606                                 
   607 000004F2 480FB60425[01000000]      movzx rax, byte [readBuffer + 1]
   608 000004FB 4883F830                cmp rax, '0'
   609 000004FF 7C1D                    jl .single_digit
   610 00000501 4883F839                cmp rax, '9'
   611 00000505 7F17                    jg .single_digit
   612 00000507 4883F80A                cmp rax, 10
   613 0000050B 7411                    je .single_digit
   614 0000050D 4883F80D                cmp rax, 13
   615 00000511 740B                    je .single_digit
   616                                 
   617                                 
   618 00000513 4883E830                sub rax, '0'
   619 00000517 486BDB0A                imul rbx, 10
   620 0000051B 4801C3                  add rbx, rax
   621 0000051E EBFE                    jmp .validate
   622                                 
   623                                 .single_digit:
   624                                 
   625                                 
   626                                 .validate:
   627                                 
   628 00000520 4883FB04                cmp rbx, 4
   629 00000524 7C0F                    jl .error
   630 00000526 4883FB0A                cmp rbx, 10
   631 0000052A 7F09                    jg .error
   632                                 
   633                                 
   634 0000052C 881C25[00000000]        mov [kVal], bl
   635 00000533 4831C0                  xor rax, rax
   636 00000536 C3                      ret
   637                                 
   638                                 .error:
   639 00000537 48C7C7[00000000]        mov rdi, errMsgK
   640 0000053E E886FBFFFF              call printStr
   641 00000543 48C7C0FFFFFFFF          mov rax, -1
   642 0000054A C3                      ret
   643                                 
   644                                 
   645                                 
   646                                 generateWords:
   647                                 
   648 0000054B 4831C0                  xor rax, rax
   649 0000054E C3                      ret
   650                                 
   651                                 
   652                                 
   653                                 limpiar_tempKmer:
   654 0000054F 50                      push rax
   655 00000550 51                      push rcx
   656 00000551 4831C9                  xor rcx, rcx
   657 00000554 48C7C010000000          mov rax, 16
   658                                 .limpiar_loop:
   659 0000055B C681[00000000]00        mov byte [tempKmer + rcx], 0
   660 00000562 48FFC1                  inc rcx
   661 00000565 48FFC8                  dec rax
   662 00000568 75EF                    jnz .limpiar_loop
   663 0000056A 59                      pop rcx
   664 0000056B 58                      pop rax
   665 0000056C C3                      ret
   666                                 
   667                                 
